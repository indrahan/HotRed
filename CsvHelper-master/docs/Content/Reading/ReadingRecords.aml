<?xml version="1.0" encoding="utf-8"?>
<topic id="4a79beee-3aee-4e4d-9686-b31bbc0b6d6c" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      	Reading records will give you back a custom class object with the
      	properties filled with the fields of the CSV record.
      </para>
    </introduction>
    
    <section address="Default Record Reading">
    	<title>Default Reading</title>
    	<content>
    		By default, reading fields into a custom class object will use the
    		name of the property and match that against the field's header name.
    		
    		<para/>
    		
    		<alert>
    			False is being passed in to the
    			<link xlink:href="f83c2dce-6a4b-4752-a9c8-e549c4101d39#CSV Data Example">GetDataStream</link>
    			method so that the header names don't have spaces. This is so
    			they will match up nicely with our property names.
    		</alert>
    		
    		<code language="C#">
    			<![CDATA[
using( var reader = new CsvReader( new StreamReader( GetDataStream( true, false ) ) ) )
{
	while( reader.Read() )
	{
		Console.WriteLine( reader.GetRecord<CustomObject>() );
	}
}
    			]]>
    		</code>
    	</content>
    </section>
    
    <section address="Default Record Reading Output">
    	<title>Output</title>
    	<content>
    		<alert>
    			The property <codeInline>CustomTypeColumn</codeInline> is
    			<codeInline>null</codeInline>. This is because the default
    			<codeEntityReference>T:System.ComponentModel.TypeConverter</codeEntityReference>
    			doesn't know how to convert from a <codeInline>string</codeInline>.
    			We will need to create a <link xlink:href="7396d13f-e1a2-4ecd-9efc-008623709bc9"/>
    			to convert our custom type properly.
    		</alert>
    	
			<mediaLink>
				<image xlink:href="DefaultRecordReadingOutput"/>
			</mediaLink>
    	</content>
    </section>
    
    <section address="Custom Record Reading">
    	<title>Custom Record Reading</title>
    	<content>
    		<para>
	    		Sometimes your custom class object doesn't exactly line up with
	    		the fields of the CSV file. When this happens, you can add
	    		attributes to your custom class object to change how the reader behaves.
	    	</para>
	    	
	    	<alert>
	    		The only difference here is the class
	    		<link xlink:href="f83c2dce-6a4b-4752-a9c8-e549c4101d39#Custom Class with Attributes">CustomObjectWithAttributes</link>
	    		has <codeEntityReference>T:CsvHelper.CsvFieldAttribute</codeEntityReference>'s
	    		applied to the properties. Reading happens the exact same way.
	    	</alert>
	    	
	    	<alert>
	    		This time true is being passed in for parameter <codeInline>hasSpacesInHeaderNames</codeInline>
	    		to demonstrate that the property names don't match the CSV field
	    		header names.
	    	</alert>
    		
    		<code language="C#">
    			<![CDATA[
using( var reader = new CsvReader( new StreamReader( GetDataStream( true, true ) ) ) )
{
	while( reader.Read() )
	{
		Console.WriteLine( reader.GetRecord<CustomObjectWithAttributes>() );
	}
}
    			]]>
    		</code>
    	</content>
    </section>
    
    <section address="Custom Record Reading Output">
    	<title>Output</title>
    	<content>
    		All the properties are still being populated with values even though
    		the property names don't match the field header names.
    	
    		<alert>
    			The <codeInline>CustomTypeColumn</codeInline> property now has a
    			value because a <codeEntityReference>T:System.ComponentModel.TypeConverterAttribute</codeEntityReference>
    			specifying a <codeEntityReference>T:System.ComponentModel.TypeConverter</codeEntityReference>
    			that knows how to parse the text was applied.
    		</alert>
    	
			<mediaLink>
				<image xlink:href="CustomRecordReadingOutput"/>
			</mediaLink>
    	</content>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>